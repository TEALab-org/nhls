#include <omp.h>
  int t1, t2, t3, t4;
 int lb, ub, lbp, ubp, lb2, ub2;
 register int lbv, ubv;
if ((N >= 1) && (T >= 1)) {
  for (t1=-1;t1<=floord(T-1,512);t1++) {
    lbp=ceild(t1,2);
    ubp=min(floord(2*T+N-2,2048),floord(1024*t1+N+1022,2048));
#pragma omp parallel for private(lbv,ubv,t3,t4)
    for (t2=lbp;t2<=ubp;t2++) {
      if ((t1 <= floord(2048*t2-N,1024)) && (t2 >= ceild(N,2048))) {
        if (N%2 == 0) {
          A[0][(N-1)] = ((N-1) < N/2) ? (0.25*(((N-1) == N-1)? 0 :A[1][(N-1)+1]) + 0.5*A[1][(N-1)] + 0.25*(((N-1) == 0)? 0 :A[1][(N-1)-1])) : (0.2*(((N-1) == N-1)? 0 :A[1][(N-1)+1]) + 0.6*A[1][(N-1)] + 0.2*(((N-1) == 0)? 0 :A[1][(N-1)-1]));;
        }
      }
      if ((N == 1) && (t1 == 2*t2)) {
        if (t1%2 == 0) {
          A[1][0] = (0 < N/2) ? (0.25*((0 == N-1)? 0 :A[0][0 +1]) + 0.5*A[0][0] + 0.25*((0 == 0)? 0 :A[0][0 -1])) : (0.2*((0 == N-1)? 0 :A[0][0 +1]) + 0.6*A[0][0] + 0.2*((0 == 0)? 0 :A[0][0 -1]));;
        }
        if (t1%2 == 0) {
          A[0][0] = (0 < N/2) ? (0.25*((0 == N-1)? 0 :A[1][0 +1]) + 0.5*A[1][0] + 0.25*((0 == 0)? 0 :A[1][0 -1])) : (0.2*((0 == N-1)? 0 :A[1][0 +1]) + 0.6*A[1][0] + 0.2*((0 == 0)? 0 :A[1][0 -1]));;
        }
      }
      if ((N == 1) && (t1 == 2*t2)) {
        for (t3=512*t1+1;t3<=min(T-1,512*t1+1023);t3++) {
          if (t1%2 == 0) {
            A[1][0] = (0 < N/2) ? (0.25*((0 == N-1)? 0 :A[0][0 +1]) + 0.5*A[0][0] + 0.25*((0 == 0)? 0 :A[0][0 -1])) : (0.2*((0 == N-1)? 0 :A[0][0 +1]) + 0.6*A[0][0] + 0.2*((0 == 0)? 0 :A[0][0 -1]));;
          }
          if (t1%2 == 0) {
            A[0][0] = (0 < N/2) ? (0.25*((0 == N-1)? 0 :A[1][0 +1]) + 0.5*A[1][0] + 0.25*((0 == 0)? 0 :A[1][0 -1])) : (0.2*((0 == N-1)? 0 :A[1][0 +1]) + 0.6*A[1][0] + 0.2*((0 == 0)? 0 :A[1][0 -1]));;
          }
        }
      }
      if ((N >= 2) && (t1 == 2*t2)) {
        if (t1%2 == 0) {
          A[1][0] = (0 < N/2) ? (0.25*((0 == N-1)? 0 :A[0][0 +1]) + 0.5*A[0][0] + 0.25*((0 == 0)? 0 :A[0][0 -1])) : (0.2*((0 == N-1)? 0 :A[0][0 +1]) + 0.6*A[0][0] + 0.2*((0 == 0)? 0 :A[0][0 -1]));;
        }
        for (t4=1024*t1+1;t4<=1024*t1+2;t4++) {
          if (t1%2 == 0) {
            A[0][(-1024*t1+t4-1)] = ((-1024*t1+t4-1) < N/2) ? (0.25*(((-1024*t1+t4-1) == N-1)? 0 :A[1][(-1024*t1+t4-1)+1]) + 0.5*A[1][(-1024*t1+t4-1)] + 0.25*(((-1024*t1+t4-1) == 0)? 0 :A[1][(-1024*t1+t4-1)-1])) : (0.2*(((-1024*t1+t4-1) == N-1)? 0 :A[1][(-1024*t1+t4-1)+1]) + 0.6*A[1][(-1024*t1+t4-1)] + 0.2*(((-1024*t1+t4-1) == 0)? 0 :A[1][(-1024*t1+t4-1)-1]));;
          }
        }
      }
      if (t1 == 2*t2-1) {
        for (t3=max(0,512*t1);t3<=min(min(floord(1024*t1+N-1025,2),T-1),512*t1+511);t3++) {
          for (t4=1024*t1+1024;t4<=-1024*t1+4*t3+1024;t4++) {
            if ((t1+1)%2 == 0) {
              A[1][(-2*t3+t4)] = ((-2*t3+t4) < N/2) ? (0.25*(((-2*t3+t4) == N-1)? 0 :A[0][(-2*t3+t4)+1]) + 0.5*A[0][(-2*t3+t4)] + 0.25*(((-2*t3+t4) == 0)? 0 :A[0][(-2*t3+t4)-1])) : (0.2*(((-2*t3+t4) == N-1)? 0 :A[0][(-2*t3+t4)+1]) + 0.6*A[0][(-2*t3+t4)] + 0.2*(((-2*t3+t4) == 0)? 0 :A[0][(-2*t3+t4)-1]));;
            }
            if ((t1+1)%2 == 0) {
              A[0][(-2*t3+t4-1)] = ((-2*t3+t4-1) < N/2) ? (0.25*(((-2*t3+t4-1) == N-1)? 0 :A[1][(-2*t3+t4-1)+1]) + 0.5*A[1][(-2*t3+t4-1)] + 0.25*(((-2*t3+t4-1) == 0)? 0 :A[1][(-2*t3+t4-1)-1])) : (0.2*(((-2*t3+t4-1) == N-1)? 0 :A[1][(-2*t3+t4-1)+1]) + 0.6*A[1][(-2*t3+t4-1)] + 0.2*(((-2*t3+t4-1) == 0)? 0 :A[1][(-2*t3+t4-1)-1]));;
            }
          }
          for (t4=-1024*t1+4*t3+1025;t4<=min(2*t3+N,-1024*t1+4*t3+1026);t4++) {
            if ((t1+1)%2 == 0) {
              A[0][(-2*t3+t4-1)] = ((-2*t3+t4-1) < N/2) ? (0.25*(((-2*t3+t4-1) == N-1)? 0 :A[1][(-2*t3+t4-1)+1]) + 0.5*A[1][(-2*t3+t4-1)] + 0.25*(((-2*t3+t4-1) == 0)? 0 :A[1][(-2*t3+t4-1)-1])) : (0.2*(((-2*t3+t4-1) == N-1)? 0 :A[1][(-2*t3+t4-1)+1]) + 0.6*A[1][(-2*t3+t4-1)] + 0.2*(((-2*t3+t4-1) == 0)? 0 :A[1][(-2*t3+t4-1)-1]));;
            }
          }
        }
      }
      if (t1 == 2*t2-1) {
        for (t3=max(max(0,ceild(1024*t1-N+1025,2)),ceild(1024*t1+N-1024,2));t3<=min(T-1,512*t1+511);t3++) {
          for (t4=1024*t1+1024;t4<=2*t3+N-1;t4++) {
            if ((t1+1)%2 == 0) {
              A[1][(-2*t3+t4)] = ((-2*t3+t4) < N/2) ? (0.25*(((-2*t3+t4) == N-1)? 0 :A[0][(-2*t3+t4)+1]) + 0.5*A[0][(-2*t3+t4)] + 0.25*(((-2*t3+t4) == 0)? 0 :A[0][(-2*t3+t4)-1])) : (0.2*(((-2*t3+t4) == N-1)? 0 :A[0][(-2*t3+t4)+1]) + 0.6*A[0][(-2*t3+t4)] + 0.2*(((-2*t3+t4) == 0)? 0 :A[0][(-2*t3+t4)-1]));;
            }
            if ((t1+1)%2 == 0) {
              A[0][(-2*t3+t4-1)] = ((-2*t3+t4-1) < N/2) ? (0.25*(((-2*t3+t4-1) == N-1)? 0 :A[1][(-2*t3+t4-1)+1]) + 0.5*A[1][(-2*t3+t4-1)] + 0.25*(((-2*t3+t4-1) == 0)? 0 :A[1][(-2*t3+t4-1)-1])) : (0.2*(((-2*t3+t4-1) == N-1)? 0 :A[1][(-2*t3+t4-1)+1]) + 0.6*A[1][(-2*t3+t4-1)] + 0.2*(((-2*t3+t4-1) == 0)? 0 :A[1][(-2*t3+t4-1)-1]));;
            }
          }
          if ((t1+1)%2 == 0) {
            A[0][(N-1)] = ((N-1) < N/2) ? (0.25*(((N-1) == N-1)? 0 :A[1][(N-1)+1]) + 0.5*A[1][(N-1)] + 0.25*(((N-1) == 0)? 0 :A[1][(N-1)-1])) : (0.2*(((N-1) == N-1)? 0 :A[1][(N-1)+1]) + 0.6*A[1][(N-1)] + 0.2*(((N-1) == 0)? 0 :A[1][(N-1)-1]));;
          }
        }
      }
      for (t3=max(max(0,512*t1),1024*t1-1024*t2+1024);t3<=min(min(floord(2048*t1-2048*t2+N-1,2),T-1),512*t1+511);t3++) {
        for (t4=2048*t2;t4<=-2048*t1+2048*t2+4*t3;t4++) {
          A[1][(-2*t3+t4)] = ((-2*t3+t4) < N/2) ? (0.25*(((-2*t3+t4) == N-1)? 0 :A[0][(-2*t3+t4)+1]) + 0.5*A[0][(-2*t3+t4)] + 0.25*(((-2*t3+t4) == 0)? 0 :A[0][(-2*t3+t4)-1])) : (0.2*(((-2*t3+t4) == N-1)? 0 :A[0][(-2*t3+t4)+1]) + 0.6*A[0][(-2*t3+t4)] + 0.2*(((-2*t3+t4) == 0)? 0 :A[0][(-2*t3+t4)-1]));;
          A[0][(-2*t3+t4-1)] = ((-2*t3+t4-1) < N/2) ? (0.25*(((-2*t3+t4-1) == N-1)? 0 :A[1][(-2*t3+t4-1)+1]) + 0.5*A[1][(-2*t3+t4-1)] + 0.25*(((-2*t3+t4-1) == 0)? 0 :A[1][(-2*t3+t4-1)-1])) : (0.2*(((-2*t3+t4-1) == N-1)? 0 :A[1][(-2*t3+t4-1)+1]) + 0.6*A[1][(-2*t3+t4-1)] + 0.2*(((-2*t3+t4-1) == 0)? 0 :A[1][(-2*t3+t4-1)-1]));;
        }
        for (t4=-2048*t1+2048*t2+4*t3+1;t4<=min(2*t3+N,-2048*t1+2048*t2+4*t3+2);t4++) {
          A[0][(-2*t3+t4-1)] = ((-2*t3+t4-1) < N/2) ? (0.25*(((-2*t3+t4-1) == N-1)? 0 :A[1][(-2*t3+t4-1)+1]) + 0.5*A[1][(-2*t3+t4-1)] + 0.25*(((-2*t3+t4-1) == 0)? 0 :A[1][(-2*t3+t4-1)-1])) : (0.2*(((-2*t3+t4-1) == N-1)? 0 :A[1][(-2*t3+t4-1)+1]) + 0.6*A[1][(-2*t3+t4-1)] + 0.2*(((-2*t3+t4-1) == 0)? 0 :A[1][(-2*t3+t4-1)-1]));;
        }
      }
      for (t3=max(max(max(0,ceild(2048*t1-2048*t2+N,2)),ceild(2048*t2-N+1,2)),1024*t1-1024*t2+1024);t3<=min(T-1,512*t1+511);t3++) {
        for (t4=2048*t2;t4<=2*t3+N-1;t4++) {
          A[1][(-2*t3+t4)] = ((-2*t3+t4) < N/2) ? (0.25*(((-2*t3+t4) == N-1)? 0 :A[0][(-2*t3+t4)+1]) + 0.5*A[0][(-2*t3+t4)] + 0.25*(((-2*t3+t4) == 0)? 0 :A[0][(-2*t3+t4)-1])) : (0.2*(((-2*t3+t4) == N-1)? 0 :A[0][(-2*t3+t4)+1]) + 0.6*A[0][(-2*t3+t4)] + 0.2*(((-2*t3+t4) == 0)? 0 :A[0][(-2*t3+t4)-1]));;
          A[0][(-2*t3+t4-1)] = ((-2*t3+t4-1) < N/2) ? (0.25*(((-2*t3+t4-1) == N-1)? 0 :A[1][(-2*t3+t4-1)+1]) + 0.5*A[1][(-2*t3+t4-1)] + 0.25*(((-2*t3+t4-1) == 0)? 0 :A[1][(-2*t3+t4-1)-1])) : (0.2*(((-2*t3+t4-1) == N-1)? 0 :A[1][(-2*t3+t4-1)+1]) + 0.6*A[1][(-2*t3+t4-1)] + 0.2*(((-2*t3+t4-1) == 0)? 0 :A[1][(-2*t3+t4-1)-1]));;
        }
        A[0][(N-1)] = ((N-1) < N/2) ? (0.25*(((N-1) == N-1)? 0 :A[1][(N-1)+1]) + 0.5*A[1][(N-1)] + 0.25*(((N-1) == 0)? 0 :A[1][(N-1)-1])) : (0.2*(((N-1) == N-1)? 0 :A[1][(N-1)+1]) + 0.6*A[1][(N-1)] + 0.2*(((N-1) == 0)? 0 :A[1][(N-1)-1]));;
      }
      if (t1 == 2*t2) {
        for (t3=512*t1+1;t3<=min(min(floord(1024*t1+N-1,2),T-1),512*t1+511);t3++) {
          if (t1%2 == 0) {
            A[1][0] = (0 < N/2) ? (0.25*((0 == N-1)? 0 :A[0][0 +1]) + 0.5*A[0][0] + 0.25*((0 == 0)? 0 :A[0][0 -1])) : (0.2*((0 == N-1)? 0 :A[0][0 +1]) + 0.6*A[0][0] + 0.2*((0 == 0)? 0 :A[0][0 -1]));;
          }
          for (t4=2*t3+1;t4<=-1024*t1+4*t3;t4++) {
            if (t1%2 == 0) {
              A[1][(-2*t3+t4)] = ((-2*t3+t4) < N/2) ? (0.25*(((-2*t3+t4) == N-1)? 0 :A[0][(-2*t3+t4)+1]) + 0.5*A[0][(-2*t3+t4)] + 0.25*(((-2*t3+t4) == 0)? 0 :A[0][(-2*t3+t4)-1])) : (0.2*(((-2*t3+t4) == N-1)? 0 :A[0][(-2*t3+t4)+1]) + 0.6*A[0][(-2*t3+t4)] + 0.2*(((-2*t3+t4) == 0)? 0 :A[0][(-2*t3+t4)-1]));;
            }
            if (t1%2 == 0) {
              A[0][(-2*t3+t4-1)] = ((-2*t3+t4-1) < N/2) ? (0.25*(((-2*t3+t4-1) == N-1)? 0 :A[1][(-2*t3+t4-1)+1]) + 0.5*A[1][(-2*t3+t4-1)] + 0.25*(((-2*t3+t4-1) == 0)? 0 :A[1][(-2*t3+t4-1)-1])) : (0.2*(((-2*t3+t4-1) == N-1)? 0 :A[1][(-2*t3+t4-1)+1]) + 0.6*A[1][(-2*t3+t4-1)] + 0.2*(((-2*t3+t4-1) == 0)? 0 :A[1][(-2*t3+t4-1)-1]));;
            }
          }
          for (t4=-1024*t1+4*t3+1;t4<=min(2*t3+N,-1024*t1+4*t3+2);t4++) {
            if (t1%2 == 0) {
              A[0][(-2*t3+t4-1)] = ((-2*t3+t4-1) < N/2) ? (0.25*(((-2*t3+t4-1) == N-1)? 0 :A[1][(-2*t3+t4-1)+1]) + 0.5*A[1][(-2*t3+t4-1)] + 0.25*(((-2*t3+t4-1) == 0)? 0 :A[1][(-2*t3+t4-1)-1])) : (0.2*(((-2*t3+t4-1) == N-1)? 0 :A[1][(-2*t3+t4-1)+1]) + 0.6*A[1][(-2*t3+t4-1)] + 0.2*(((-2*t3+t4-1) == 0)? 0 :A[1][(-2*t3+t4-1)-1]));;
            }
          }
        }
      }
      if ((N >= 2) && (t1 == 2*t2)) {
        for (t3=ceild(1024*t1+N,2);t3<=min(T-1,512*t1+511);t3++) {
          if (t1%2 == 0) {
            A[1][0] = (0 < N/2) ? (0.25*((0 == N-1)? 0 :A[0][0 +1]) + 0.5*A[0][0] + 0.25*((0 == 0)? 0 :A[0][0 -1])) : (0.2*((0 == N-1)? 0 :A[0][0 +1]) + 0.6*A[0][0] + 0.2*((0 == 0)? 0 :A[0][0 -1]));;
          }
          for (t4=2*t3+1;t4<=2*t3+N-1;t4++) {
            if (t1%2 == 0) {
              A[1][(-2*t3+t4)] = ((-2*t3+t4) < N/2) ? (0.25*(((-2*t3+t4) == N-1)? 0 :A[0][(-2*t3+t4)+1]) + 0.5*A[0][(-2*t3+t4)] + 0.25*(((-2*t3+t4) == 0)? 0 :A[0][(-2*t3+t4)-1])) : (0.2*(((-2*t3+t4) == N-1)? 0 :A[0][(-2*t3+t4)+1]) + 0.6*A[0][(-2*t3+t4)] + 0.2*(((-2*t3+t4) == 0)? 0 :A[0][(-2*t3+t4)-1]));;
            }
            if (t1%2 == 0) {
              A[0][(-2*t3+t4-1)] = ((-2*t3+t4-1) < N/2) ? (0.25*(((-2*t3+t4-1) == N-1)? 0 :A[1][(-2*t3+t4-1)+1]) + 0.5*A[1][(-2*t3+t4-1)] + 0.25*(((-2*t3+t4-1) == 0)? 0 :A[1][(-2*t3+t4-1)-1])) : (0.2*(((-2*t3+t4-1) == N-1)? 0 :A[1][(-2*t3+t4-1)+1]) + 0.6*A[1][(-2*t3+t4-1)] + 0.2*(((-2*t3+t4-1) == 0)? 0 :A[1][(-2*t3+t4-1)-1]));;
            }
          }
          if (t1%2 == 0) {
            A[0][(N-1)] = ((N-1) < N/2) ? (0.25*(((N-1) == N-1)? 0 :A[1][(N-1)+1]) + 0.5*A[1][(N-1)] + 0.25*(((N-1) == 0)? 0 :A[1][(N-1)-1])) : (0.2*(((N-1) == N-1)? 0 :A[1][(N-1)+1]) + 0.6*A[1][(N-1)] + 0.2*(((N-1) == 0)? 0 :A[1][(N-1)-1]));;
          }
        }
      }
      for (t3=max(512*t1+512,1024*t1-1024*t2+1024);t3<=min(min(floord(2048*t2-N+2047,2),floord(2048*t1-2048*t2+N+2044,2)),T-1);t3++) {
        for (t4=-2048*t1+2048*t2+4*t3-2047;t4<=-2048*t1+2048*t2+4*t3-2046;t4++) {
          A[1][(-2*t3+t4)] = ((-2*t3+t4) < N/2) ? (0.25*(((-2*t3+t4) == N-1)? 0 :A[0][(-2*t3+t4)+1]) + 0.5*A[0][(-2*t3+t4)] + 0.25*(((-2*t3+t4) == 0)? 0 :A[0][(-2*t3+t4)-1])) : (0.2*(((-2*t3+t4) == N-1)? 0 :A[0][(-2*t3+t4)+1]) + 0.6*A[0][(-2*t3+t4)] + 0.2*(((-2*t3+t4) == 0)? 0 :A[0][(-2*t3+t4)-1]));;
        }
        for (t4=-2048*t1+2048*t2+4*t3-2045;t4<=2*t3+N-1;t4++) {
          A[1][(-2*t3+t4)] = ((-2*t3+t4) < N/2) ? (0.25*(((-2*t3+t4) == N-1)? 0 :A[0][(-2*t3+t4)+1]) + 0.5*A[0][(-2*t3+t4)] + 0.25*(((-2*t3+t4) == 0)? 0 :A[0][(-2*t3+t4)-1])) : (0.2*(((-2*t3+t4) == N-1)? 0 :A[0][(-2*t3+t4)+1]) + 0.6*A[0][(-2*t3+t4)] + 0.2*(((-2*t3+t4) == 0)? 0 :A[0][(-2*t3+t4)-1]));;
          A[0][(-2*t3+t4-1)] = ((-2*t3+t4-1) < N/2) ? (0.25*(((-2*t3+t4-1) == N-1)? 0 :A[1][(-2*t3+t4-1)+1]) + 0.5*A[1][(-2*t3+t4-1)] + 0.25*(((-2*t3+t4-1) == 0)? 0 :A[1][(-2*t3+t4-1)-1])) : (0.2*(((-2*t3+t4-1) == N-1)? 0 :A[1][(-2*t3+t4-1)+1]) + 0.6*A[1][(-2*t3+t4-1)] + 0.2*(((-2*t3+t4-1) == 0)? 0 :A[1][(-2*t3+t4-1)-1]));;
        }
        A[0][(N-1)] = ((N-1) < N/2) ? (0.25*(((N-1) == N-1)? 0 :A[1][(N-1)+1]) + 0.5*A[1][(N-1)] + 0.25*(((N-1) == 0)? 0 :A[1][(N-1)-1])) : (0.2*(((N-1) == N-1)? 0 :A[1][(N-1)+1]) + 0.6*A[1][(N-1)] + 0.2*(((N-1) == 0)? 0 :A[1][(N-1)-1]));;
      }
      for (t3=max(max(ceild(2048*t2-N+2048,2),512*t1+512),1024*t1-1024*t2+1024);t3<=min(T-1,512*t1+1023);t3++) {
        for (t4=-2048*t1+2048*t2+4*t3-2047;t4<=-2048*t1+2048*t2+4*t3-2046;t4++) {
          A[1][(-2*t3+t4)] = ((-2*t3+t4) < N/2) ? (0.25*(((-2*t3+t4) == N-1)? 0 :A[0][(-2*t3+t4)+1]) + 0.5*A[0][(-2*t3+t4)] + 0.25*(((-2*t3+t4) == 0)? 0 :A[0][(-2*t3+t4)-1])) : (0.2*(((-2*t3+t4) == N-1)? 0 :A[0][(-2*t3+t4)+1]) + 0.6*A[0][(-2*t3+t4)] + 0.2*(((-2*t3+t4) == 0)? 0 :A[0][(-2*t3+t4)-1]));;
        }
        for (t4=-2048*t1+2048*t2+4*t3-2045;t4<=2048*t2+2047;t4++) {
          A[1][(-2*t3+t4)] = ((-2*t3+t4) < N/2) ? (0.25*(((-2*t3+t4) == N-1)? 0 :A[0][(-2*t3+t4)+1]) + 0.5*A[0][(-2*t3+t4)] + 0.25*(((-2*t3+t4) == 0)? 0 :A[0][(-2*t3+t4)-1])) : (0.2*(((-2*t3+t4) == N-1)? 0 :A[0][(-2*t3+t4)+1]) + 0.6*A[0][(-2*t3+t4)] + 0.2*(((-2*t3+t4) == 0)? 0 :A[0][(-2*t3+t4)-1]));;
          A[0][(-2*t3+t4-1)] = ((-2*t3+t4-1) < N/2) ? (0.25*(((-2*t3+t4-1) == N-1)? 0 :A[1][(-2*t3+t4-1)+1]) + 0.5*A[1][(-2*t3+t4-1)] + 0.25*(((-2*t3+t4-1) == 0)? 0 :A[1][(-2*t3+t4-1)-1])) : (0.2*(((-2*t3+t4-1) == N-1)? 0 :A[1][(-2*t3+t4-1)+1]) + 0.6*A[1][(-2*t3+t4-1)] + 0.2*(((-2*t3+t4-1) == 0)? 0 :A[1][(-2*t3+t4-1)-1]));;
        }
      }
      if ((N >= 3) && (t1 <= min(floord(2048*t2-N+1,1024),floord(2048*t2+2*T-N-2047,2048)))) {
        if ((N+1)%2 == 0) {
          for (t4=2048*t1-2048*t2+2*N+2043;t4<=2048*t1-2048*t2+2*N+2044;t4++) {
            A[1][(-2048*t1+2048*t2+t4-N-2045)] = ((-2048*t1+2048*t2+t4-N-2045) < N/2) ? (0.25*(((-2048*t1+2048*t2+t4-N-2045) == N-1)? 0 :A[0][(-2048*t1+2048*t2+t4-N-2045)+1]) + 0.5*A[0][(-2048*t1+2048*t2+t4-N-2045)] + 0.25*(((-2048*t1+2048*t2+t4-N-2045) == 0)? 0 :A[0][(-2048*t1+2048*t2+t4-N-2045)-1])) : (0.2*(((-2048*t1+2048*t2+t4-N-2045) == N-1)? 0 :A[0][(-2048*t1+2048*t2+t4-N-2045)+1]) + 0.6*A[0][(-2048*t1+2048*t2+t4-N-2045)] + 0.2*(((-2048*t1+2048*t2+t4-N-2045) == 0)? 0 :A[0][(-2048*t1+2048*t2+t4-N-2045)-1]));;
          }
          A[0][(N-1)] = ((N-1) < N/2) ? (0.25*(((N-1) == N-1)? 0 :A[1][(N-1)+1]) + 0.5*A[1][(N-1)] + 0.25*(((N-1) == 0)? 0 :A[1][(N-1)-1])) : (0.2*(((N-1) == N-1)? 0 :A[1][(N-1)+1]) + 0.6*A[1][(N-1)] + 0.2*(((N-1) == 0)? 0 :A[1][(N-1)-1]));;
        }
      }
      if ((N >= 2) && (t1 == 2*t2)) {
        for (t3=512*t1+512;t3<=min(floord(1024*t1-N+2047,2),T-1);t3++) {
          if (t1%2 == 0) {
            A[1][0] = (0 < N/2) ? (0.25*((0 == N-1)? 0 :A[0][0 +1]) + 0.5*A[0][0] + 0.25*((0 == 0)? 0 :A[0][0 -1])) : (0.2*((0 == N-1)? 0 :A[0][0 +1]) + 0.6*A[0][0] + 0.2*((0 == 0)? 0 :A[0][0 -1]));;
          }
          for (t4=2*t3+1;t4<=2*t3+N-1;t4++) {
            if (t1%2 == 0) {
              A[1][(-2*t3+t4)] = ((-2*t3+t4) < N/2) ? (0.25*(((-2*t3+t4) == N-1)? 0 :A[0][(-2*t3+t4)+1]) + 0.5*A[0][(-2*t3+t4)] + 0.25*(((-2*t3+t4) == 0)? 0 :A[0][(-2*t3+t4)-1])) : (0.2*(((-2*t3+t4) == N-1)? 0 :A[0][(-2*t3+t4)+1]) + 0.6*A[0][(-2*t3+t4)] + 0.2*(((-2*t3+t4) == 0)? 0 :A[0][(-2*t3+t4)-1]));;
            }
            if (t1%2 == 0) {
              A[0][(-2*t3+t4-1)] = ((-2*t3+t4-1) < N/2) ? (0.25*(((-2*t3+t4-1) == N-1)? 0 :A[1][(-2*t3+t4-1)+1]) + 0.5*A[1][(-2*t3+t4-1)] + 0.25*(((-2*t3+t4-1) == 0)? 0 :A[1][(-2*t3+t4-1)-1])) : (0.2*(((-2*t3+t4-1) == N-1)? 0 :A[1][(-2*t3+t4-1)+1]) + 0.6*A[1][(-2*t3+t4-1)] + 0.2*(((-2*t3+t4-1) == 0)? 0 :A[1][(-2*t3+t4-1)-1]));;
            }
          }
          if (t1%2 == 0) {
            A[0][(N-1)] = ((N-1) < N/2) ? (0.25*(((N-1) == N-1)? 0 :A[1][(N-1)+1]) + 0.5*A[1][(N-1)] + 0.25*(((N-1) == 0)? 0 :A[1][(N-1)-1])) : (0.2*(((N-1) == N-1)? 0 :A[1][(N-1)+1]) + 0.6*A[1][(N-1)] + 0.2*(((N-1) == 0)? 0 :A[1][(N-1)-1]));;
          }
        }
      }
      if (t1 == 2*t2) {
        for (t3=max(ceild(1024*t1-N+2048,2),512*t1+512);t3<=min(T-1,512*t1+1023);t3++) {
          if (t1%2 == 0) {
            A[1][0] = (0 < N/2) ? (0.25*((0 == N-1)? 0 :A[0][0 +1]) + 0.5*A[0][0] + 0.25*((0 == 0)? 0 :A[0][0 -1])) : (0.2*((0 == N-1)? 0 :A[0][0 +1]) + 0.6*A[0][0] + 0.2*((0 == 0)? 0 :A[0][0 -1]));;
          }
          for (t4=2*t3+1;t4<=1024*t1+2047;t4++) {
            if (t1%2 == 0) {
              A[1][(-2*t3+t4)] = ((-2*t3+t4) < N/2) ? (0.25*(((-2*t3+t4) == N-1)? 0 :A[0][(-2*t3+t4)+1]) + 0.5*A[0][(-2*t3+t4)] + 0.25*(((-2*t3+t4) == 0)? 0 :A[0][(-2*t3+t4)-1])) : (0.2*(((-2*t3+t4) == N-1)? 0 :A[0][(-2*t3+t4)+1]) + 0.6*A[0][(-2*t3+t4)] + 0.2*(((-2*t3+t4) == 0)? 0 :A[0][(-2*t3+t4)-1]));;
            }
            if (t1%2 == 0) {
              A[0][(-2*t3+t4-1)] = ((-2*t3+t4-1) < N/2) ? (0.25*(((-2*t3+t4-1) == N-1)? 0 :A[1][(-2*t3+t4-1)+1]) + 0.5*A[1][(-2*t3+t4-1)] + 0.25*(((-2*t3+t4-1) == 0)? 0 :A[1][(-2*t3+t4-1)-1])) : (0.2*(((-2*t3+t4-1) == N-1)? 0 :A[1][(-2*t3+t4-1)+1]) + 0.6*A[1][(-2*t3+t4-1)] + 0.2*(((-2*t3+t4-1) == 0)? 0 :A[1][(-2*t3+t4-1)-1]));;
            }
          }
        }
      }
      if (t1 <= min(floord(2048*t2-N,1024),floord(2048*t2+2*T-N-2048,2048))) {
        if (N%2 == 0) {
          A[1][(N-1)] = ((N-1) < N/2) ? (0.25*(((N-1) == N-1)? 0 :A[0][(N-1)+1]) + 0.5*A[0][(N-1)] + 0.25*(((N-1) == 0)? 0 :A[0][(N-1)-1])) : (0.2*(((N-1) == N-1)? 0 :A[0][(N-1)+1]) + 0.6*A[0][(N-1)] + 0.2*(((N-1) == 0)? 0 :A[0][(N-1)-1]));;
        }
      }
    }
  }
}

#ifdef TIME
    gettimeofday(&end, 0);

    ts_return = timeval_subtract(&result, &end, &start);
    tdiff = (double)(result.tv_sec + result.tv_usec * 1.0e-6);

    printf("|Time taken =  %7.5lfs\t", tdiff);
#endif

#ifdef VERIFY
    total=0;
    for (i = 0; i < N; i++) {
        total+= A[T%2][i] ;
    }
    printf("|sum: %e\t", total);
    for (i = 0; i < N; i++) {
        sum_err_sqr += (A[T%2][i] - (total/N))*(A[T%2][i] - (total/N));
    }
    printf("|rms(A) = %7.2f\t", sqrt(sum_err_sqr));
    for (i = 0; i < N; i++) {
        chtotal += ((char *)A[T%2])[i];
    }
    printf("|sum(rep(A)) = %ld\n", chtotal);
#endif
    return 0;
}

// icc -O3 -fp-model precise heat_1d_np.c -o op-heat-1d-np -lm
// /* @ begin PrimeTile (num_tiling_levels=1; first_depth=1; last_depth=-1; boundary_tiling_level=-1;) @*/
// /* @ begin PrimeRegTile (scalar_replacement=0; T1t3=8; T1t4=8; ) @*/
// /* @ end @*/
// ,t2,t3,t4,t5,t6)

#ifdef TIME
    gettimeofday(&end, 0);

    ts_return = timeval_subtract(&result, &end, &start);
    tdiff = (double)(result.tv_sec + result.tv_usec * 1.0e-6);

    printf("|Time taken =  %7.5lfs\t", tdiff);
#endif

#ifdef VERIFY
    total=0;
    for (i = 0; i < N; i++) {
        total+= A[T%2][i] ;
    }
    printf("|sum: %e\t", total);
    for (i = 0; i < N; i++) {
        sum_err_sqr += (A[T%2][i] - (total/N))*(A[T%2][i] - (total/N));
    }
    printf("|rms(A) = %7.2f\t", sqrt(sum_err_sqr));
    for (i = 0; i < N; i++) {
        chtotal += ((char *)A[T%2])[i];
    }
    printf("|sum(rep(A)) = %ld\n", chtotal);
#endif
    return 0;
}

// icc -O3 -fp-model precise heat_1d_np.c -o op-heat-1d-np -lm
// /* @ begin PrimeTile (num_tiling_levels=1; first_depth=1; last_depth=-1; boundary_tiling_level=-1;) @*/
// /* @ begin PrimeRegTile (scalar_replacement=0; T1t3=8; T1t4=8; ) @*/
// /* @ end @*/
// ,t2,t3,t4,t5,t6)
